apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prysm
  labels:
    app: multinet
    tier: prysm
spec:
  replicas: {{ .Values.PRYSM_NODES }}
  serviceName: prysm
  selector:
    matchLabels:
      tier: prysm
  template:
    metadata:
      generateName: prysm-
      labels:
        tier: prysm
    spec:
      volumes:
        - name: deposits-storage-staging
          persistentVolumeClaim:
            claimName: deposits-storage-pvc-staging
        - name: common-data-staging
          persistentVolumeClaim:
            claimName: common-data-pvc-staging
      containers:
        - name: pandora
          image: ubuntu
          resources:
            requests:
              memory: "1000M"
              cpu: "1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /root/multinet/repo/data
              name: common-data-staging
          command: [ "bash", "-c" ]
          ports:
            - containerPort: 8545
            - containerPort: 30303
          args:
            - echo $PANDORA_INIT_SCRIPT;
              echo $PANDORA_INIT_SCRIPT > /root/multinet/repo/run_pandoraB64.sh;
              base64 -d /root/multinet/repo/run_pandoraB64.sh > /root/multinet/repo/run_pandora.sh;
              chmod +x /root/multinet/repo/run_pandora.sh;
              MULTINET_POD_NAME=$MULTINET_POD_NAME MULTINET_POD_IP=$MULTINET_POD_IP PANDORA_GH_TAG=$PANDORA_GH_TAG /root/multinet/repo/run_pandora.sh;
          terminationMessagePolicy: FallbackToLogsOnError
          # inject environment variables
          env:
            - name: MULTINET_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MULTINET_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PANDORA_STATS_LOGIN_SECRET
              value: "{{ .Values.PANDORA_STATS_LOGIN_SECRET }}"
            - name: PANDORA_STATS_HOST
              value: "{{ .Values.PANDORA_STATS_HOST }}"
            - name: PANDORA_INIT_SCRIPT
              value: {{ .Files.Get "run_pandora.sh" | b64enc }}
            - name: PANDORA_COMMIT
              value: "{{ .Values.PANDORA_COMMIT }}"
            - name: PANDORA_GH_TAG
              value: "{{ .Values.PANDORA_GH_TAG }}"
        - name: vanguard
          image: silesiacoin/multinet-prysm:v17
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /root/multinet/repo/deposits
            name: deposits-storage-staging
          - mountPath: /root/multinet/repo/data
            name: common-data-staging
          command: [ "bash", "-c"]
          ports:
            - name: monitoring-port
              containerPort: 8080
              protocol: TCP
            - name: grpc-port
              containerPort: 4000
              protocol: TCP
            - name: p2p-tcp-port
              containerPort: 13000
              protocol: TCP
          args:
          - echo $VANGUARD_SCRIPT > /root/multinet/repo/prysm/run_beacon-nodeB64.sh;
            echo "copied";
            base64 -d /root/multinet/repo/prysm/run_beacon-nodeB64.sh > /root/multinet/repo/prysm/run_beacon-node.sh;
            echo "decoded";
            chmod +x /root/multinet/repo/prysm/run_beacon-node.sh;
            cd /root/multinet/repo/prysm;
            MULTINET_POD_NAME=$MULTINET_POD_NAME MULTINET_POD_IP=$MULTINET_POD_IP VANGUARD_COMMIT=$VANGUARD_COMMIT /root/multinet/repo/prysm/run_beacon-node.sh;
          # inject environment variables
          env:
            - name: MULTINET_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MULTINET_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VANGUARD_SCRIPT
              value: {{ .Files.Get "run_beacon-node.sh" | b64enc }}
            - name: VANGUARD_COMMIT
              value: "{{ .Values.VANGUARD_COMMIT }}"

        - name: validator
          image: silesiacoin/multinet-prysm:v17
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /root/multinet/repo/deposits
              name: deposits-storage-staging
            - mountPath: /root/multinet/repo/data
              name: common-data-staging
          command: [ "bash", "-c" ]
          ports:
            - name: monitoring-port
              containerPort: 8081
              protocol: TCP
          args:
            - echo $PRYSM_SCRIPT > /root/multinet/repo/prysm/run_validatorB64.sh;
              echo "copied";
              base64 -d /root/multinet/repo/prysm/run_validatorB64.sh > /root/multinet/repo/prysm/run_validator.sh;
              echo "decoded";
              chmod +x /root/multinet/repo/prysm/run_validator.sh;
              cd /root/multinet/repo/prysm;
              MULTINET_POD_NAME=$MULTINET_POD_NAME MULTINET_POD_IP=$MULTINET_POD_IP /root/multinet/repo/prysm/run_validator.sh;
          # inject environment variables
          env:
            - name: MULTINET_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MULTINET_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: PRYSM_SCRIPT
              value: {{ .Files.Get "run_validator.sh" | b64enc }}
            - name: VALIDATOR_COMMIT
              value: "{{ .Values.VALIDATOR_COMMIT }}"
        - name: eth2stats-client
          image: eth2clients/eth2stats-client
          imagePullPolicy: IfNotPresent
          args: ["run", "--v", "--eth2stats.node-name", "$(MULTINET_POD_NAME)", "--eth2stats.addr", "eth2stats:9090", "--eth2stats.tls=false", "--beacon.type", "prysm", "--beacon.addr", "localhost:4000"]
          env:
            - name: MULTINET_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MULTINET_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
        - name: orchestrator
          image: ubuntu
          resources:
            requests:
              memory: "100M"
              cpu: "0.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /root/multinet/repo/data
              name: common-data-staging
          command: [ "bash", "-c" ]
          args:
            - echo $ORCHESTRATOR_INIT_SCRIPT;
              echo $ORCHESTRATOR_INIT_SCRIPT > /root/multinet/repo/orchestratorB64.sh;
              base64 -d /root/multinet/repo/orchestratorB64.sh > /root/multinet/repo/orchestrator.sh;
              chmod +x /root/multinet/repo/orchestrator.sh;
              MULTINET_POD_NAME=$MULTINET_POD_NAME MULTINET_POD_IP=$MULTINET_POD_IP ETH_2_GENESIS_TIME=$ETH_2_GENESIS_TIME ORCHESTRATOR_GH_TAG=$ORCHESTRATOR_GH_TAG /root/multinet/repo/orchestrator.sh
          terminationMessagePolicy: FallbackToLogsOnError
          # inject environment variables
          env:
            - name: MULTINET_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MULTINET_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ORCHESTRATOR_INIT_SCRIPT
              value: {{ .Files.Get "run_orchestrator.sh" | b64enc }}
            - name: ETH_2_GENESIS_TIME
              value: "{{ .Values.ETH_2_GENESIS_TIME }}"
            - name: ORCHESTRATOR_GH_TAG
              value: "{{ .Values.ORCHESTRATOR_GH_TAG }}"
