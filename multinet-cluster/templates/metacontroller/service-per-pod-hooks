apiVersion: v1
items:
- apiVersion: v1
  data:
    finalize-service-per-pod.jsonnet: |-
      function(request) {
        // If the StatefulSet is updated to no longer match our decorator selector,
        // or if the StatefulSet is deleted, clean up any attachments we made.
        attachments: [],
        // Mark as finalized once we observe all Services are gone.
        finalized: std.length(request.attachments['Service.v1']) == 0
      }
    sync-pod-name-label.jsonnet: |-
      function(request) {
        local pod = request.object,
        local labelKey = pod.metadata.annotations["pod-name-label"],

        // Inject the Pod name as a label with the key requested in the annotation.
        labels: {
          [labelKey]: pod.metadata.name
        }
      }
    sync-service-per-pod.jsonnet: |-
      function(request) {
        local statefulset = request.object,
        local labelKey = statefulset.metadata.annotations["service-per-pod-label"],
        local ports = statefulset.metadata.annotations["service-per-pod-ports"],

        // Create a service for each Pod, with a selector on the given label key.
        attachments: [
          {
            apiVersion: "v1",
            kind: "Service",
            metadata: {
              name: statefulset.metadata.name + "-" + index,
              labels: {app: "service-per-pod"}
            },
            spec: {
              type: "LoadBalancer",
              selector: {
                [labelKey]: statefulset.metadata.name + "-" + index
              },
              ports: [
                {
                  local parts = std.split(portnums, ":"),
                  name: "port-" + std.parseInt(parts[0]),
                  port: std.parseInt(parts[0]),
                  targetPort: std.parseInt(parts[1]),
                }
                for portnums in std.split(ports, ",")
              ]
            }
          }
          for index in std.range(0, statefulset.spec.replicas - 1)
        ]
      }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"finalize-service-per-pod.jsonnet":"function(request) {\n  // If the StatefulSet is updated to no longer match our decorator selector,\n  // or if the StatefulSet is deleted, clean up any attachments we made.\n  attachments: [],\n  // Mark as finalized once we observe all Services are gone.\n  finalized: std.length(request.attachments['Service.v1']) == 0\n}","sync-pod-name-label.jsonnet":"function(request) {\n  local pod = request.object,\n  local labelKey = pod.metadata.annotations[\"pod-name-label\"],\n\n  // Inject the Pod name as a label with the key requested in the annotation.\n  labels: {\n    [labelKey]: pod.metadata.name\n  }\n}","sync-service-per-pod.jsonnet":"function(request) {\n  local statefulset = request.object,\n  local labelKey = statefulset.metadata.annotations[\"service-per-pod-label\"],\n  local ports = statefulset.metadata.annotations[\"service-per-pod-ports\"],\n\n  // Create a service for each Pod, with a selector on the given label key.\n  attachments: [\n    {\n      apiVersion: \"v1\",\n      kind: \"Service\",\n      metadata: {\n        name: statefulset.metadata.name + \"-\" + index,\n        labels: {app: \"service-per-pod\"}\n      },\n      spec: {\n        type: \"LoadBalancer\",\n        selector: {\n          [labelKey]: statefulset.metadata.name + \"-\" + index\n        },\n        ports: [\n          {\n            local parts = std.split(portnums, \":\"),\n            name: \"port-\" + std.parseInt(parts[0]),\n            port: std.parseInt(parts[0]),\n            targetPort: std.parseInt(parts[1]),\n          }\n          for portnums in std.split(ports, \",\")\n        ]\n      }\n    }\n    for index in std.range(0, statefulset.spec.replicas - 1)\n  ]\n}"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"service-per-pod-hooks-gf4gm9mtcm","namespace":"metacontroller"}}
    name: service-per-pod-hooks-gf4gm9mtcm
    namespace: metacontroller
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      cloud.google.com/neg: '{"ingress":true}'
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"service-per-pod","namespace":"metacontroller"},"spec":{"ports":[{"port":80,"targetPort":8080}],"selector":{"app":"service-per-pod"}}}
      meta.helm.sh/release-name: eth20
      meta.helm.sh/release-namespace: dev
    creationTimestamp: "2021-09-17T23:03:00Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: service-per-pod
    namespace: metacontroller
    resourceVersion: "161245862"
    selfLink: /api/v1/namespaces/metacontroller/services/service-per-pod
    uid: 13b92783-a561-431a-a5ca-3fbcbfa3c176
  spec:
    clusterIP: 10.4.2.144
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: service-per-pod
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"service-per-pod","namespace":"metacontroller"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"service-per-pod"}},"template":{"metadata":{"labels":{"app":"service-per-pod"}},"spec":{"containers":[{"image":"metacontroller/jsonnetd:0.1","imagePullPolicy":"Always","name":"hooks","volumeMounts":[{"mountPath":"/hooks","name":"hooks"}],"workingDir":"/hooks"}],"volumes":[{"configMap":{"name":"service-per-pod-hooks-gf4gm9mtcm"},"name":"hooks"}]}}}}
      meta.helm.sh/release-name: eth20
      meta.helm.sh/release-namespace: dev
    creationTimestamp: "2021-09-17T23:03:00Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: service-per-pod
    namespace: metacontroller
    resourceVersion: "161245903"
    selfLink: /apis/apps/v1/namespaces/metacontroller/deployments/service-per-pod
    uid: 34a67dcc-324c-4c73-8810-546def2e166b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: service-per-pod
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: service-per-pod
      spec:
        containers:
        - image: metacontroller/jsonnetd:0.1
          imagePullPolicy: Always
          name: hooks
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /hooks
            name: hooks
          workingDir: /hooks
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: service-per-pod-hooks-gf4gm9mtcm
          name: hooks
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-09-17T23:03:02Z"
      lastUpdateTime: "2021-09-17T23:03:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-09-17T23:03:00Z"
      lastUpdateTime: "2021-09-17T23:03:02Z"
      message: ReplicaSet "service-per-pod-864cc87bc4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: metacontroller.k8s.io/v1alpha1
  kind: DecoratorController
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"metacontroller.k8s.io/v1alpha1","kind":"DecoratorController","metadata":{"annotations":{},"name":"pod-name-label"},"spec":{"hooks":{"sync":{"webhook":{"url":"http://service-per-pod.metacontroller/sync-pod-name-label"}}},"resources":[{"annotationSelector":{"matchExpressions":[{"key":"pod-name-label","operator":"Exists"}]},"apiVersion":"v1","labelSelector":{"matchExpressions":[{"key":"pod-name","operator":"DoesNotExist"}]},"resource":"pods"}]}}
      meta.helm.sh/release-name: eth20
      meta.helm.sh/release-namespace: dev
    creationTimestamp: "2021-09-17T14:19:32Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: pod-name-label
    resourceVersion: "160955123"
    selfLink: /apis/metacontroller.k8s.io/v1alpha1/decoratorcontrollers/pod-name-label
    uid: a6a9d60f-54e6-48d1-a68e-eb17df2684ff
  spec:
    hooks:
      sync:
        webhook:
          url: http://service-per-pod.metacontroller/sync-pod-name-label
    resources:
    - annotationSelector:
        matchExpressions:
        - key: pod-name-label
          operator: Exists
      apiVersion: v1
      labelSelector:
        matchExpressions:
        - key: pod-name
          operator: DoesNotExist
      resource: pods
- apiVersion: metacontroller.k8s.io/v1alpha1
  kind: DecoratorController
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"metacontroller.k8s.io/v1alpha1","kind":"DecoratorController","metadata":{"annotations":{},"name":"service-per-pod"},"spec":{"attachments":[{"apiVersion":"v1","resource":"services"}],"hooks":{"finalize":{"webhook":{"url":"http://service-per-pod.metacontroller/finalize-service-per-pod"}},"sync":{"webhook":{"url":"http://service-per-pod.metacontroller/sync-service-per-pod"}}},"resources":[{"annotationSelector":{"matchExpressions":[{"key":"service-per-pod-label","operator":"Exists"},{"key":"service-per-pod-ports","operator":"Exists"}]},"apiVersion":"apps/v1","resource":"statefulsets"}]}}
      meta.helm.sh/release-name: eth20
      meta.helm.sh/release-namespace: dev
    creationTimestamp: "2021-09-17T14:11:01Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: service-per-pod
    resourceVersion: "160950359"
    selfLink: /apis/metacontroller.k8s.io/v1alpha1/decoratorcontrollers/service-per-pod
    uid: 8c172337-1807-493c-af5a-dc0e5c37581f
  spec:
    attachments:
    - apiVersion: v1
      resource: services
    hooks:
      finalize:
        webhook:
          url: http://service-per-pod.metacontroller/finalize-service-per-pod
      sync:
        webhook:
          url: http://service-per-pod.metacontroller/sync-service-per-pod
    resources:
    - annotationSelector:
        matchExpressions:
        - key: service-per-pod-label
          operator: Exists
        - key: service-per-pod-ports
          operator: Exists
      apiVersion: apps/v1
      resource: statefulsets
kind: List
metadata: {}
